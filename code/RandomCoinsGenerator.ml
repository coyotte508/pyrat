(**********************************************************************************************************************************************************************************************************************************)
(******************************************************************************************************** CLASS DEFINITION ********************************************************************************************************)
(**********************************************************************************************************************************************************************************************************************************)

    class randomCoinsGenerator (player1Location : int * int)
                               (player2Location : int * int)
                               (mazeWidth       : int)
                               (mazeHeight      : int)
                               (coinProbability : float) =

        (******************************************************************************************************************************************************************************************************************)
        (*************************************************************************************************** INHERITANCE **************************************************************************************************)
        (******************************************************************************************************************************************************************************************************************)
        
            object (self) inherit CoinsGenerator.coinsGenerator as super
            
        (******************************************************************************************************************************************************************************************************************)
        (************************************************************************************************* PRIVATE METHODS ************************************************************************************************)
        (******************************************************************************************************************************************************************************************************************)
            
            method private generateCoinsWithSymmetry =
                
                (* We initialize with random coins *)
                let coins = ref [] in
                let maxL = mazeHeight - max 0 ((mazeHeight - mazeWidth) / 2) - 1 in
                for l = 0 to maxL do
                    let minC = max 0 (l - (mazeHeight - mazeWidth) / 2) in
                    for c = minC to mazeWidth - 1 do
                        let coin = Random.float 1.0 in
                        if coin < coinProbability && (l, c) <> player1Location && (l, c) <> player2Location then
                        (
                            coins := (l, c) :: !coins;
                            if l <> mazeHeight - 1 - l || c <> mazeWidth - 1 - c then
                                coins := (mazeHeight - 1 - l, mazeWidth - 1 - c) :: !coins
                        )
                    done
                done;
                
                (* Done *)
                !coins
                
        (******************************************************************************************************************************************************************************************************************)    
            
            method private generateCoinsWithoutSymmetry =
                
                (* We initialize with random coins *)
                let coins = ref [] in
                for l = 0 to mazeHeight- 1 do
                    for c = 0 to mazeWidth - 1 do
                        let coin = Random.float 1.0 in
                        if coin < coinProbability && (l, c) <> player1Location && (l, c) <> player2Location then
                            coins := (l, c) :: !coins
                    done
                done;
                
                (* Done *)
                !coins
                
        (******************************************************************************************************************************************************************************************************************)
        (************************************************************************************************* PUBLIC METHODS *************************************************************************************************)
        (******************************************************************************************************************************************************************************************************************)
        
            method generateCoins =

                (* The symmetry depends on if it is a single-player game *)
                let coins = ref [] in
                while List.length !coins = 0 do
                    coins := if player2Location = (-1, -1) then
                                 self#generateCoinsWithoutSymmetry
                             else
                                 self#generateCoinsWithSymmetry
                done;
                
                (* Done *)
                !coins
                
        (******************************************************************************************************************************************************************************************************************)
        (******************************************************************************************************************************************************************************************************************)
        
    end
    
(**********************************************************************************************************************************************************************************************************************************)
(**********************************************************************************************************************************************************************************************************************************)